--Proc criar utilizador
CALL sp_utilizadores_CREATE('User', 'user', 'user', 'user@computronix.com', '987654321', 1);

--Função read utilizador
SELECT * FROM fn_utilizadores_READ(1);

--Função read utilizadores
SELECT * FROM fn_utilizadores_READALL();

--Proc para editar utilizador
CALL sp_Utilizadores_UPDATE(1, 'novoUser', 'novoUser', 'novoUser', 'novoUser@example.com', '987654321', 2);


--Proc criar armazém
CALL sp_Armazens_CREATE('Localizacao');

--Função read armazém
SELECT * FROM fn_Armazem_READ(1);

--Função read armazéns
SELECT * FROM fn_Armazens_READALL();

--Proc para editar armazém
CALL sp_Armazens_UPDATE(1, 'NovaLocalizacao');


--Proc criar componentes
CALL sp_Componentes_CREATE('Descricao', 'Componente', 1);

--Função read componente
SELECT * FROM fn_Componente_READ(1);

--Função read componentes
SELECT * FROM fn_Componentes_READALL();

--Proc editar componente
CALL sp_Componentes_UPDATE(1, 'NovaDescrição', 'NovoComponente');

--Proc criar componente na encomenda de compra
CALL sp_Componentes_Encomenda_Compra_CREATE(1, 1, 50.00, 10);

--Função read componente da encomenda de compra
SELECT * FROM fn_Componentes_Encomenda_Compra_READ(1);

--Função read componentes da encomenda de compra
SELECT * FROM fn_Componentes_Encomenda_Compra_READALL();

-- Função para buscar um detalhe de componente em encomenda de compra por ID da encomenda
SELECT * FROM fn_Componentes_Encomenda_Compra_READByEnc(1);

--Proc editar componente da encomenda de compra
CALL sp_Componentes_Encomenda_Compra_UPDATE(1, 2, 1, 60.00, 15);


--Proc criar componente na guia de remessa de compra
CALL sp_Componentes_Guia_Remessa_Compra_CREATE(1, 2, 10, 1);

--Função para buscar detalhes dos componentes na guia de remessa de compra por ID_Remessa_compra
SELECT * FROM fn_Componentes_Guia_Remessa_Compra_READ(1);

--Função read componentes da guia de remessa de compra
SELECT * FROM fn_Componentes_Guia_Remessa_Compra_READALL();

--Proc editar componente da guia de remessa de compra
CALL sp_Componentes_Guia_Remessa_Compra_UPDATE(1, 2, 1, 15, 2);


--Proc criar componente na ficha de produção
CALL sp_Componentes_Ficha_Producao_CREATE(1, 2, 15, 1);

--Função para buscar detalhes dos componentes na ficha de produção por ID_Comp_Fich
SELECT * FROM fn_Componentes_Ficha_Producao_READ(1);

--Função read componentes da ficha de produção
SELECT * FROM fn_Componentes_Ficha_Producao_READALL();

--Proc editar componente da ficha de produção
CALL sp_Componentes_Ficha_Producao_UPDATE(1, 2, 1, 15, 2);


--Proc criar perfil
CALL sp_perfil_CREATE('Administrador', '2');

--Função read perfil
SELECT * FROM fn_perfil_READ(1);

--Função read perfis
SELECT * FROM fn_perfil_READALL();

--Proc editar perfil
-- Chamar a stored procedure
CALL sp_perfil_UPDATE(1, 'NovoPerfil', '1');


--Proc criar mão de obra
CALL sp_Mao_Obra_CREATE('MaoObra', 50.00);

--Função read mão de obra
SELECT * FROM fn_Mao_Obra_READ(1);

--Função read mãos de obra
SELECT * FROM fn_Mao_Obra_READALL();

--Proc editar mão de obra
CALL sp_Mao_Obra_UPDATE(1, 'NovaMaoObra', 60.00);


--Proc criar tipo de equipamento
CALL sp_Tipo_Equipamento_CREATE('Computador');

--Função read tipo de equipamento
SELECT * FROM fn_Tipo_Equipamento_READ(1);

--Função read tipos de equipamento
SELECT * FROM fn_Tipo_Equipamento_READALL();

--Proc editar tipo de equipamento
CALL sp_Tipo_Equipamento_UPDATE(1, 'Tablet');


--Proc criar equipamento na encomenda de venda
CALL sp_Equipamentos_Encomenda_Venda_CREATE(1, 2, 100.00, 5, 1);

--Função read equipamentos na encomenda de venda por ID_Enc_Venda
SELECT * FROM fn_Equipamentos_Encomenda_Venda_READ(1);

--Função read equipamentos na encomenda de venda
SELECT * FROM fn_Equipamentos_Encomenda_Venda_READALL();

--Proc editar equipamento na encomenda de venda
CALL sp_Equipamentos_Encomenda_Venda_UPDATE(
    p_ID_Equipamentos_Encomenda_Venda := 1,
    p_ID_Enc_Venda := 2,
    p_ID_Equipamento := 1,
    p_Preco_Total := 150.00,
    p_Quantidade := 5,
    p_ID_Armazem := 2
);

--Proc criar equipamento guia de remessa de venda
CALL sp_Equipamentos_Guia_Remessa_Venda_CREATE(1, 2, 5, 'MoradaDestino');

--Função read equipamentos na guia de remessa de venda por ID_Remessa_Venda
SELECT * FROM fn_Equipamentos_Guia_Remessa_Venda_READ(1);

--Função read equipamentos guia de remessa de venda
SELECT * FROM fn_Equipamentos_Guia_Remessa_Venda_READALL();

--Proc editar equipamento guia de remessa de venda
CALL sp_Equipamentos_Guia_Remessa_Venda_UPDATE(1, 2, 1, 10);


--Proc para criar valores atributos
CALL sp_Valores_Atributos_CREATE ('Valor');

--Funcao read valores atributos por id
SELECT * FROM fn_Valores_Atributos_READ(1);

--Funcao read valores atributos
SELECT * FROM fn_Valores_Atributos_READALL();

--Proc para editar valores_atributos
CALL sp_Valores_Atributos_UPDATE(1, 'Novo Valor Atualizado');
	
	
--Proc para criar cliente
CALL sp_Clientes_CREATE(11, 'Nome', 'Morada', '912345678', '123456789');

--Função read clientes por ID_cliente
SELECT * FROM fn_clientes_read(1);
	
--Funcao read clientes
SELECT * FROM fn_clientes_readall();

--Proc editar cliente
Call sp_clientes_update(1, 'Outro Nome', 'Outra Morada', '67584903', '1234231');


--Proc criar fornecedor
CALL sp_fornecedores_CREATE('Nome do Fornecedor', 'Morada do Fornecedor', '123456789', '987654321');

--Funcao read fornecedor por id
SELECT * FROM fn_fornecedores_READ(1);

--Funcao read fornecedor
SELECT * FROM fn_fornecedores_READALL();

--Proc editar fornecedor
CALL sp_fornecedores_UPDATE(1, 'Novo Nome', 'Nova Morada', '987654321', '123456789');


--Proc create encomenda compra
DO $$ 
DECLARE 
   p_id_enc_compra INT;
BEGIN
CALL sp_encomenda_compra_create(1, 2, p_id_enc_compra);
END $$;

--Funcao read encomenda de compra por id
SELECT * FROM fn_encomenda_compra_READ(1);

--Funcao read encomenda de compra
SELECT * FROM fn_encomenda_compra_READALL();

--Proc editar encomenda de compra
CALL sp_encomenda_compra_update(1, 'Concluída', CURRENT_DATE, 1, 1);


--Proc para criar equipamento
DO $$ 
DECLARE 
	p_novo_id INT;
BEGIN
CALL sp_equipamentos_create('Nome do Equipamento', 'Descrição do Equipamento', 100.00, 1, p_novo_id);
END $$;

--Funcao read equipamento por id
SELECT * FROM fn_equipamentos_READ(1);

--Funcao read equipamento
SELECT * FROM fn_equipamentos_READALL();

--Proc para editar equipamento
CALL sp_equipamentos_update(1, 'Novo Nome', 'Nova Descrição', 150.00, 2);


--Proc para criar guia remessa de venda
DO $$ 
DECLARE 
   p_id_guia_venda INT;
BEGIN
CALL sp_guia_remessa_venda_create(1, '987654321', p_id_guia_venda);
END $$;

--Funcao read guia renessa de venda por id
SELECT * FROM fn_guia_remessa_venda_READ(1);

--Funcao read guia remessa de venda
SELECT * FROM fn_guia_remessa_venda_READALL();

--Proc para editar guia remessa de venda
CALL sp_guia_remessa_venda_update(1, 2, CURRENT_DATE, '123456789');


--Vista do stock equipamento
SELECT * FROM VIEW_stocks_read_equipamentos;

--Vista stock componentes
SELECT * FROM VIEW_stocks_read_componentes;

--Trigger atualizar estado encomenda venda
INSERT INTO Equipamentos_Guia_Remessa_Venda (ID_Remessa_Venda, ID_Equipamento, Quantidade)
VALUES (1, 1, 10);

CREATE OR REPLACE FUNCTION teste_trigger_temporario()
RETURNS TRIGGER AS $$
BEGIN
    PERFORM atualizar_estado_encomenda_venda();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trig_teste_temporario
BEFORE INSERT OR UPDATE ON Guia_Remessa_Venda
FOR EACH ROW
EXECUTE FUNCTION teste_trigger_temporario();

SELECT * FROM Encomenda_Venda;

--Trigger atualizar estado encomenda compra
INSERT INTO Componentes_Guia_Remessa_Compra (ID_Remessa_compra, ID_Comp, Quantidade) VALUES (1, 1, 10);

SELECT * FROM Encomenda_Compra;

--Trigger check_user
SELECT check_user('username', 'password');

--Funcao para devolver id do user
SELECT get_user_id('admin');

--Funcao para devolver username
SELECT get_idperfil_by_username(1);

--Proc create venda encomenda
DO $$ 
DECLARE 
	new_enc_venda_id INT;
BEGIN
CALL sp_encomenda_venda_create(1, 2, new_enc_venda_id);
END $$;

--Funcao read venda encomenda por id
SELECT * FROM fn_encomenda_venda_READ(1);



--Proc eliminar componente
CALL sp_Componentes_DELETE(1);

--Proc eliminar componente da encomenda de compra
CALL sp_Componentes_Encomenda_Compra_DELETE(1);

--Proc eliminar componente da guia de remessa de compra
CALL sp_Componentes_Guia_Remessa_Compra_DELETE(1);

--Proc eliminar componente da ficha de produção
CALL sp_Componentes_Ficha_Producao_DELETE(1);

--Proc eliminar perfil
CALL sp_perfil_DELETE(1);

--Proc eliminar mão de obra
CALL sp_Mao_Obra_DELETE(1);

--Proc eliminar tipo de equipamento
CALL sp_Tipo_Equipamento_DELETE(1);

--Proc eliminar equipamento na encomenda de venda
CALL sp_Equipamentos_Encomenda_Venda_DELETE(1);

--Proc eliminar equipamento guia de remessa de venda
CALL sp_Equipamentos_Guia_Remessa_Venda_DELETE(1);

--Proc para eliminar valores atributos
CALL sp_Valores_Atributos_DELETE(1);

--Proc eliminar cliente
Call sp_clientes_delete(1);

--Proc eliminar fornecedor
CALL sp_fornecedores_DELETE(1);

--Proc eliminar encomenda de compra
CALL sp_encomenda_compra_delete(1);

-- Proc para eliminar equipamento
CALL sp_equipamentos_delete(1);

--Proc para eliminar guia de remessa de venda
CALL sp_guia_remessa_venda_delete(1);

--Proc eliminar venda encomenda
CALL sp_encomenda_venda_delete(1);

--Proc eliminar guia remessa compra
CALL sp_guia_remessa_compra_delete(1);

--Proc eliminar ficha producao
CALL sp_ficha_producao_delete(1);

--Proc para eliminar armazém
CALL sp_Armazens_DELETE(1);
